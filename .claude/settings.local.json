{
  "permissions": {
    "allow": [
      "Bash(grep:*)",
      "Bash(ls:*)",
      "Bash(source:*)",
      "Bash(find:*)",
      "Bash(mv:*)",
      "Bash(mkdir:*)",
      "Bash(tree:*)",
      "Bash(ruff:*)",
      "Bash(touch:*)",
      "Bash(cat:*)",
      "Bash(ruff check:*)",
      "Bash(pytest:*)",
      "Bash(python:*)",
      "Bash(python -m pytest:*)",
      "Bash(python3 -m pytest:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "WebFetch(domain:github.com)",
      "Bash(npm create:*)",
      "Bash(npm install)",
      "Bash(npm install:*)",
      "Bash(npx tailwindcss init:*)",
      "Bash(./node_modules/.bin/tailwindcss:*)",
      "Bash(npx tsc:*)",
      "Bash(timeout 10 npm run dev)",
      "Bash(timeout 15 npm run dev)",
      "Bash(npm uninstall:*)",
      "Bash(npm run build:*)",
      "Bash(npx eslint:*)",
      "Bash(npm run dev:*)",
      "Bash(npm run lint)",
      "Bash(node:*)",
      "Bash(del validate-geometry.js)",
      "Bash(rm:*)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "WebFetch(domain:tympanus.net)",
      "WebFetch(domain:r3f.docs.pmnd.rs)",
      "WebFetch(domain:discourse.threejs.org)",
      "Bash(git restore:*)",
      "Bash(git rm:*)",
      "Bash(npm test)",
      "WebSearch",
      "Bash(npx tsx:*)",
      "WebFetch(domain:sphericalhorns.net)",
      "Bash(npx prettier:*)",
      "Bash(npx vitest run:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npx ts-node:*)",
      "Bash(npx create-nx-workspace:*)",
      "Bash(pnpm install:*)",
      "Bash(pnpm add:*)",
      "Bash(npx nx generate:*)",
      "Bash(cp:*)",
      "Bash(nx build:*)",
      "Bash(npx nx build:*)",
      "Bash(npx nx serve:*)",
      "Bash(npx nx run-many:*)",
      "Bash(npm ls:*)",
      "mcp__ide__getDiagnostics",
      "mcp__ide__executeCode",
      "Bash(npx playwright screenshot:*)",
      "Bash(true)",
      "WebFetch(domain:konvajs.org)",
      "Bash(pnpm list tailwindcss postcss autoprefixer)",
      "Bash(pnpm list:*)",
      "Bash(pnpm dev:*)",
      "Bash(npx tailwindcss:*)",
      "Bash(pnpm remove:*)",
      "Bash(pnpm store prune:*)",
      "Bash(curl:*)",
      "Bash(npx nx list:*)",
      "Bash(pnpm init:*)",
      "Bash(pnpm nx run-many:*)",
      "Bash(pnpm nx run:*)",
      "Bash(npx nx graph:*)",
      "Bash(npx nx show:*)",
      "Bash(pnpm nx generate:*)",
      "Bash(pnpm nx build:*)",
      "Bash(timeout 10 pnpm nx serve horn-viewer)",
      "Bash(pnpm nx serve:*)",
      "Bash(npx nx run:*)",
      "Bash(npm run:*)",
      "Bash(pnpm --filter @horn-sim/mesher build)",
      "Bash(timeout 10 pnpm --filter @horn-sim/horn-viewer dev)",
      "Bash(timeout 15 npx nx serve horn-viewer)",
      "Bash(npx nx reset:*)",
      "Bash(timeout 15 pnpm dev:web)",
      "Bash(pnpm --filter horn-viewer dev)",
      "Bash(pnpm --filter horn-viewer build)",
      "Bash(pnpm --filter @horn-sim/horn-viewer build)",
      "Bash(timeout 30 npx nx serve horn-viewer)",
      "Bash(pnpm nx test:*)",
      "Bash(pnpm nx eslint:lint:*)",
      "Bash(pnpm nx vite:test:*)",
      "Bash(claude restart)",
      "Bash(timeout 30 pnpm --filter @horn-sim/horn-viewer dev)",
      "Bash(pnpm --filter @horn-sim/horn-mesher build)",
      "Bash(timeout 30 pnpm --filter horn-viewer dev)",
      "Bash(npm init:*)",
      "Bash(npx nx test:*)",
      "Bash(npx:*)",
      "Bash(npm exec:*)",
      "Bash(pnpm view:*)",
      "Bash(pnpm build:*)",
      "Bash(pnpm create:*)",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_take_screenshot",
      "mcp__playwright__browser_snapshot",
      "Bash(timeout:*)",
      "mcp__playwright__browser_click",
      "mcp__playwright__browser_evaluate",
      "mcp__playwright__browser_tabs",
      "mcp__playwright__browser_close"
    ],
    "deny": [],
    "defaultMode": "acceptEdits",
    "additionalDirectories": [
      "C:\\Users\\cafal\\OneDrive\\Documents\\GitHub",
      "C:\\c\\Users\\cafal\\OneDrive\\Documents"
    ]
  },
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "node .claude/hooks/react-app/quality-check.js"
          }
        ]
      }
    ]
  }
}